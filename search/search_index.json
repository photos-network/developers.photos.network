{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Developer documentation This documentation is targeting developers for Photos.network an open source project for self hosted photo management. Not a developer? If you are interested in hosting your own photos.network at home, visit our main website Code of conduct Why do I need a code of conduct? A code of conduct is a document that establishes expectations for behavior for your project\u2019s participants. To keep a positive social atmosphere in this project, some decicions and requirements have to be applied: write beginner friendly code 1 avoid full-stack frameworks 2 use PEP 484: Type Hints in the code syntax. follow the PEP 8: Style Guide coding conventions. Write clean and maintable code so beginner level programmers can understand it. This can increase the willingness of new contributors. Separate code in packages and classes, write tests \u21a9 Full-stack frameworks are great, especially for prototyping and fast development. Often they are coupling components which can lead to a time-consuming development process \u21a9","title":"Home"},{"location":"#developer-documentation","text":"This documentation is targeting developers for Photos.network an open source project for self hosted photo management. Not a developer? If you are interested in hosting your own photos.network at home, visit our main website","title":"Developer documentation"},{"location":"#code-of-conduct","text":"Why do I need a code of conduct? A code of conduct is a document that establishes expectations for behavior for your project\u2019s participants. To keep a positive social atmosphere in this project, some decicions and requirements have to be applied: write beginner friendly code 1 avoid full-stack frameworks 2 use PEP 484: Type Hints in the code syntax. follow the PEP 8: Style Guide coding conventions. Write clean and maintable code so beginner level programmers can understand it. This can increase the willingness of new contributors. Separate code in packages and classes, write tests \u21a9 Full-stack frameworks are great, especially for prototyping and fast development. Often they are coupling components which can lead to a time-consuming development process \u21a9","title":"Code of conduct"},{"location":"faq/","text":"Frequently asked questions Where comes the hype from With the enforcement of GDPR in May 2018 an increased interested in data privacy arrised. Retirement of Googles Picassa Google announced to change its storage policy starting in June 2021 where users are limited to 15GB of free space. Why another photo management application instead of contributing to one of the hundred existing ones? The list of photo and video gallery projects out there is amazing. Testing most of them ended in at least one of few complains: - sluggish performance - easy installation and setup - working with existing folder structure - supporting multiple TB of photos and videos - process RAW files - lack of control - privacy Why not use or contribute to one of the big players? Plex is great for browsing and viewing photos, but it doesn't offer an API wich can be used by 3rd party clients. Nextcloud can't work with RAW files or existing folder structures Ownphotos /LibrePhotos lacks of extensibility","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"Where comes the hype from With the enforcement of GDPR in May 2018 an increased interested in data privacy arrised. Retirement of Googles Picassa Google announced to change its storage policy starting in June 2021 where users are limited to 15GB of free space. Why another photo management application instead of contributing to one of the hundred existing ones? The list of photo and video gallery projects out there is amazing. Testing most of them ended in at least one of few complains: - sluggish performance - easy installation and setup - working with existing folder structure - supporting multiple TB of photos and videos - process RAW files - lack of control - privacy Why not use or contribute to one of the big players? Plex is great for browsing and viewing photos, but it doesn't offer an API wich can be used by 3rd party clients. Nextcloud can't work with RAW files or existing folder structures Ownphotos /LibrePhotos lacks of extensibility","title":"Frequently asked questions"},{"location":"addons/","text":"Addons One of the fundamental concepts of photos.network is the separation of concerns combined with the flexibility of customization. Except the core system, all features are bundled in addons. Create an addon Each addon is encapsulated in a separate directory wich have to contain at least two files: addon.json with detailed informations and requirements __init__.py with an async setup function addon.json In th addon.json developers need to specify a domain for their addon, this domain will be used in the configuration file. python requirements can be specified as list either by name or with exact version info. Hint The core version is not used yet. It will keep track of the required core version for backward compatibility. 1 2 3 4 5 6 7 8 9 { \"domain\" : \"unique_addon\" , \"name\" : \"This is my fancy addon\" , \"requirements\" : [ \"exif==1.0.4\" , \"torch\" ], \"core\" : \"0.1.0\" } init .py In the __init__.py at least an async setup function need to be provided. Additional files and packages can be loaded here as well. The return of the async_setup indicates if the setup process was successful. 1 2 async def async_setup ( core : ApplicationCore , config : dict ) -> bool : return True","title":"Create an addon"},{"location":"addons/#addons","text":"One of the fundamental concepts of photos.network is the separation of concerns combined with the flexibility of customization. Except the core system, all features are bundled in addons.","title":"Addons"},{"location":"addons/#create-an-addon","text":"Each addon is encapsulated in a separate directory wich have to contain at least two files: addon.json with detailed informations and requirements __init__.py with an async setup function","title":"Create an addon"},{"location":"addons/#addonjson","text":"In th addon.json developers need to specify a domain for their addon, this domain will be used in the configuration file. python requirements can be specified as list either by name or with exact version info. Hint The core version is not used yet. It will keep track of the required core version for backward compatibility. 1 2 3 4 5 6 7 8 9 { \"domain\" : \"unique_addon\" , \"name\" : \"This is my fancy addon\" , \"requirements\" : [ \"exif==1.0.4\" , \"torch\" ], \"core\" : \"0.1.0\" }","title":"addon.json"},{"location":"addons/#initpy","text":"In the __init__.py at least an async setup function need to be provided. Additional files and packages can be loaded here as well. The return of the async_setup indicates if the setup process was successful. 1 2 async def async_setup ( core : ApplicationCore , config : dict ) -> bool : return True","title":"init.py"},{"location":"addons/api/","text":"API The REST API for communication with the core system is build as an addon. This makes it very easy to customize the system on low level. Views New views can be registered during the setup process 1 core . http . register_request ( APIStatusView ) These views need to inherit from core.webserver.request.Request and provide the properties url and name . Property Required Description url path to the resource name internal name of the resource. requires_auth enables the auth check","title":"api"},{"location":"addons/api/#api","text":"The REST API for communication with the core system is build as an addon. This makes it very easy to customize the system on low level.","title":"API"},{"location":"addons/api/#views","text":"New views can be registered during the setup process 1 core . http . register_request ( APIStatusView ) These views need to inherit from core.webserver.request.Request and provide the properties url and name . Property Required Description url path to the resource name internal name of the resource. requires_auth enables the auth check","title":"Views"},{"location":"addons/metadata/","text":"metadata This addon is responsible for generating tags based on media`s metadata e.g.: filename exif","title":"metadata"},{"location":"addons/metadata/#metadata","text":"This addon is responsible for generating tags based on media`s metadata e.g.: filename exif","title":"metadata"},{"location":"addons/nextcloud/","text":"nextcloud Nextcloud is a client-server hosting service for storing and syncing files between devices. Using nextcloud as a booster for syncing files into photos.network till a native sync app is available.","title":"nextcloud"},{"location":"addons/nextcloud/#nextcloud","text":"Nextcloud is a client-server hosting service for storing and syncing files between devices. Using nextcloud as a booster for syncing files into photos.network till a native sync app is available.","title":"nextcloud"},{"location":"addons/places365/","text":"places365 Places365 is a Places CNN for scene recognition, it will use computer vision to predict the scene category, attributes, and class activation map. It is based on a Paper written by Bolei Zhou","title":"places365"},{"location":"addons/places365/#places365","text":"Places365 is a Places CNN for scene recognition, it will use computer vision to predict the scene category, attributes, and class activation map. It is based on a Paper written by Bolei Zhou","title":"places365"},{"location":"core/","text":"Core The core system is responsible for tasks e.g.: Authentication (validate the identity of users) Authorization (handle access privileges of resources like photos or albums) Add-on handling (managing add-ons) Persistency (read / write data) Task Processing (keep track of running tasks)","title":"Getting started"},{"location":"core/#core","text":"The core system is responsible for tasks e.g.: Authentication (validate the identity of users) Authorization (handle access privileges of resources like photos or albums) Add-on handling (managing add-ons) Persistency (read / write data) Task Processing (keep track of running tasks)","title":"Core"},{"location":"core/env/","text":"Prepare setup Prepare an environment by running: 1 2 3 $ python3 -m venv venv $ source ./venv/bin/activate ( venv ) $ pip3 install -r requirements_test.txt After the environment is build, install the core: 1 ( venv ) $ python3 setup.py install Run The core can be started from the venv: 1 ( venv ) $ python3 ./venv/bin/core","title":"Environment"},{"location":"core/env/#prepare-setup","text":"Prepare an environment by running: 1 2 3 $ python3 -m venv venv $ source ./venv/bin/activate ( venv ) $ pip3 install -r requirements_test.txt After the environment is build, install the core: 1 ( venv ) $ python3 setup.py install","title":"Prepare setup"},{"location":"core/env/#run","text":"The core can be started from the venv: 1 ( venv ) $ python3 ./venv/bin/core","title":"Run"},{"location":"core/structure/","text":"Structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 core/ \u251c\u2500\u2500 core/ \u2502 \u251c\u2500\u2500 __main__.py \u2502 \u251c\u2500\u2500 addon.py \u2502 \u251c\u2500\u2500 addons/ \u2502 \u251c\u2500\u2500 authentication/ \u2502 \u251c\u2500\u2500 authorization/ \u2502 \u251c\u2500\u2500 configs.py \u2502 \u251c\u2500\u2500 const.py \u2502 \u251c\u2500\u2500 context.py \u2502 \u251c\u2500\u2500 core.py \u2502 \u251c\u2500\u2500 loader.py \u2502 \u251c\u2500\u2500 persistency/ \u2502 \u251c\u2500\u2500 utils/ \u2502 \u2514\u2500\u2500 webserver/ \u2502 \u251c\u2500\u2500 tests/ \u2502 \u251c\u2500\u2500 setup.cfg \u2514\u2500\u2500 setup.py Since the core system is responsible for multiple tasks, it is mandatory to keep the file structure clean and well arranged. Each main responsibility has its own subfolder e.g.: authentication, authorization The __main__.py is the entry point and will only read the configuration file and create an application instance. core.py will monitor the application state and manage all base tasks e.g. setup and load addons or start the webserver . How addons are loaded will be found in addon.py","title":"Structure"},{"location":"core/structure/#structure","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 core/ \u251c\u2500\u2500 core/ \u2502 \u251c\u2500\u2500 __main__.py \u2502 \u251c\u2500\u2500 addon.py \u2502 \u251c\u2500\u2500 addons/ \u2502 \u251c\u2500\u2500 authentication/ \u2502 \u251c\u2500\u2500 authorization/ \u2502 \u251c\u2500\u2500 configs.py \u2502 \u251c\u2500\u2500 const.py \u2502 \u251c\u2500\u2500 context.py \u2502 \u251c\u2500\u2500 core.py \u2502 \u251c\u2500\u2500 loader.py \u2502 \u251c\u2500\u2500 persistency/ \u2502 \u251c\u2500\u2500 utils/ \u2502 \u2514\u2500\u2500 webserver/ \u2502 \u251c\u2500\u2500 tests/ \u2502 \u251c\u2500\u2500 setup.cfg \u2514\u2500\u2500 setup.py Since the core system is responsible for multiple tasks, it is mandatory to keep the file structure clean and well arranged. Each main responsibility has its own subfolder e.g.: authentication, authorization The __main__.py is the entry point and will only read the configuration file and create an application instance. core.py will monitor the application state and manage all base tasks e.g. setup and load addons or start the webserver . How addons are loaded will be found in addon.py","title":"Structure"},{"location":"frontend/","text":"Frontend App-like experience for users as Web Application. Users can browse and manage photos, organize them in albums, tag objects, locations or people or add and change sharing options.","title":"Frontend"},{"location":"frontend/#frontend","text":"App-like experience for users as Web Application. Users can browse and manage photos, organize them in albums, tag objects, locations or people or add and change sharing options.","title":"Frontend"},{"location":"mobile/","text":"Mobile Native mobile clients aren't limited in background execution wich is mandatory to sync data with the photos.network instance.","title":"General"},{"location":"mobile/#mobile","text":"Native mobile clients aren't limited in background execution wich is mandatory to sync data with the photos.network instance.","title":"Mobile"},{"location":"mobile/android/","text":"Android Android specific development details.","title":"Android"},{"location":"mobile/android/#android","text":"Android specific development details.","title":"Android"},{"location":"mobile/ios/","text":"iOS iOS specific development details.","title":"iOS"},{"location":"mobile/ios/#ios","text":"iOS specific development details.","title":"iOS"},{"location":"supervisor/","text":"Supervisor The supervisor will keep the system up-to-date, load addons without restarting the system and manage long-running and recurring jobs.","title":"Supervisor"},{"location":"supervisor/#supervisor","text":"The supervisor will keep the system up-to-date, load addons without restarting the system and manage long-running and recurring jobs.","title":"Supervisor"}]}