{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Developer documentation This documentation is targeting developers for Photos.network an open source project for self hosted photo management. Not a developer? If you are interested in hosting your own photos.network at home, visit our main website Code of conduct Why do I need a code of conduct? A code of conduct is a document that establishes expectations for behavior for your project\u2019s participants. To keep a positive social atmosphere in this project, some decicions and requirements have to be applied: write beginner friendly code 1 avoid full-stack frameworks 2 use PEP 484: Type Hints in the code syntax. follow the PEP 8: Style Guide coding conventions. Write clean and maintable code so beginner level programmers can understand it. This can increase the willingness of new contributors. Separate code in packages and classes, write tests \u21a9 Full-stack frameworks are great, especially for prototyping and fast development. Often they are coupling components which can lead to a time-consuming development process \u21a9","title":"Home"},{"location":"#developer-documentation","text":"This documentation is targeting developers for Photos.network an open source project for self hosted photo management. Not a developer? If you are interested in hosting your own photos.network at home, visit our main website","title":"Developer documentation"},{"location":"#code-of-conduct","text":"Why do I need a code of conduct? A code of conduct is a document that establishes expectations for behavior for your project\u2019s participants. To keep a positive social atmosphere in this project, some decicions and requirements have to be applied: write beginner friendly code 1 avoid full-stack frameworks 2 use PEP 484: Type Hints in the code syntax. follow the PEP 8: Style Guide coding conventions. Write clean and maintable code so beginner level programmers can understand it. This can increase the willingness of new contributors. Separate code in packages and classes, write tests \u21a9 Full-stack frameworks are great, especially for prototyping and fast development. Often they are coupling components which can lead to a time-consuming development process \u21a9","title":"Code of conduct"},{"location":"faq/","text":"Frequently asked questions Where comes the hype from? With the enforcement of GDPR in May 2018 an increased interested in data privacy arrised. The retirement of Picassa left lots of users behind. Google announced to change its storage policy taking effect in June 2021 where users are limited to 15 GB of free space. Why another photo management application The list of photo and video gallery projects out there is amazing. Testing most of them ended in at least one of few complains: sluggish performance easy installation and setup working with an existing folder structure supporting multiple TB of photos and videos process RAW files lack of control data privacy Why not use or contribute to one of the big players? Plex is great for browsing and viewing photos, but it doesn't offer an API for 3rd party clients. Nextcloud can't work with RAW files nor with existing folder structures Ownphotos not maintained anymore LibrePhotos (Ownphotos fork) lacks of extensibility","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"faq/#where-comes-the-hype-from","text":"With the enforcement of GDPR in May 2018 an increased interested in data privacy arrised. The retirement of Picassa left lots of users behind. Google announced to change its storage policy taking effect in June 2021 where users are limited to 15 GB of free space.","title":"Where comes the hype from?"},{"location":"faq/#why-another-photo-management-application","text":"The list of photo and video gallery projects out there is amazing. Testing most of them ended in at least one of few complains: sluggish performance easy installation and setup working with an existing folder structure supporting multiple TB of photos and videos process RAW files lack of control data privacy","title":"Why another photo management application"},{"location":"faq/#why-not-use-or-contribute-to-one-of-the-big-players","text":"Plex is great for browsing and viewing photos, but it doesn't offer an API for 3rd party clients. Nextcloud can't work with RAW files nor with existing folder structures Ownphotos not maintained anymore LibrePhotos (Ownphotos fork) lacks of extensibility","title":"Why not use or contribute to one of the big players?"},{"location":"overview/","text":"Overview Photos.network is planned as a modulare system with heavy focus on customization. It is separated in: Core responsible for tasks e.g.: Authentication, Addons, task processing Addons customizational part of the system wich can easily be extended by users Frontend App-like Web Application for browsing photos and administrate the system Mobile Native mobile clients for Android and iOS Supervisor Container abstraction to keep the core system up-and-running e.g.: Docker The supervisor will keep the core system up-to-date and package the core system into containers e.g. Docker \u21a9","title":"Overview"},{"location":"overview/#overview","text":"Photos.network is planned as a modulare system with heavy focus on customization. It is separated in: Core responsible for tasks e.g.: Authentication, Addons, task processing Addons customizational part of the system wich can easily be extended by users Frontend App-like Web Application for browsing photos and administrate the system Mobile Native mobile clients for Android and iOS Supervisor Container abstraction to keep the core system up-and-running e.g.: Docker The supervisor will keep the core system up-to-date and package the core system into containers e.g. Docker \u21a9","title":"Overview"},{"location":"addons/","text":"Addons One of the fundamental concepts of photos.network is the separation of concerns combined with the flexibility of customization. Except the core system, all features are bundled in addons. Create an addon Each addon is encapsulated in a separate directory wich have to contain at least two files: addon.json with detailed informations and requirements __init__.py with an async setup function addon.json In addon.json developers need to specify a unique domain for their addon, this domain will be used in the configuration file. Python requirements can be specified as list, either by name optionally with an exact version specifier. identifier required description domain yes unique identifier of the addon name yes short description what the addon can be used for. requirements yes python requirements to install before the addon setup type no define the type of the addon: image, storage core no min. version of the core system. Hint The core version is not used yet. It will keep track of the required core version for backward compatibility. example addon 1 2 3 4 5 6 7 8 9 10 { \"domain\" : \"unique_image_addon\" , \"name\" : \"This is an image processing addon\" , \"requirements\" : [ \"exif==1.0.4\" , \"torch\" ], \"type\" : \"image\" , \"core\" : \"0.1.0\" } init .py In the __init__.py at least an async setup function need to be provided. Additional files and packages can be loaded here as well. The return of the async_setup indicates if the setup process was successful. 1 2 async def async_setup ( core : ApplicationCore , config : dict ) -> bool : return True","title":"Create an addon"},{"location":"addons/#addons","text":"One of the fundamental concepts of photos.network is the separation of concerns combined with the flexibility of customization. Except the core system, all features are bundled in addons.","title":"Addons"},{"location":"addons/#create-an-addon","text":"Each addon is encapsulated in a separate directory wich have to contain at least two files: addon.json with detailed informations and requirements __init__.py with an async setup function","title":"Create an addon"},{"location":"addons/#addonjson","text":"In addon.json developers need to specify a unique domain for their addon, this domain will be used in the configuration file. Python requirements can be specified as list, either by name optionally with an exact version specifier. identifier required description domain yes unique identifier of the addon name yes short description what the addon can be used for. requirements yes python requirements to install before the addon setup type no define the type of the addon: image, storage core no min. version of the core system. Hint The core version is not used yet. It will keep track of the required core version for backward compatibility.","title":"addon.json"},{"location":"addons/#example-addon","text":"1 2 3 4 5 6 7 8 9 10 { \"domain\" : \"unique_image_addon\" , \"name\" : \"This is an image processing addon\" , \"requirements\" : [ \"exif==1.0.4\" , \"torch\" ], \"type\" : \"image\" , \"core\" : \"0.1.0\" }","title":"example addon"},{"location":"addons/#initpy","text":"In the __init__.py at least an async setup function need to be provided. Additional files and packages can be loaded here as well. The return of the async_setup indicates if the setup process was successful. 1 2 async def async_setup ( core : ApplicationCore , config : dict ) -> bool : return True","title":"init.py"},{"location":"addons/api/","text":"API The REST API for communication with the core system is build as an addon too. This makes it easy to customize the system by adding additional resources. Views Views can be registered during the setup process 1 2 async def async_setup ( core : ApplicationCore , config : dict ) -> bool : core . http . register_request ( APIStatusView ) These views need to inherit from core.webserver.request.RequestView and provide the properties url and name . With an additional requires_auth property can be defined if the resource can be reached without authentication. Property Required Description url path to the resource name internal name of the resource. requires_auth enables the auth check Methods Each view can offer multiple methods to the given url property. an async get method will handle GET requests 1 2 async def get ( self , core , request ) -> web . Response : return self . json_message ( \"respond with a json message.\" ) while an async post method will handle POST requests and so on. 1 2 async def post ( self , request , entity_id ) -> web . Response : return self . json_message ( \"entity has been created.\" ) Response Each view can define its own response. Return a simple json 1 return self . json_message ( \"simple json string\" ) Return a data as json 1 return self . json ({ \"foo\" : \"bar\" })","title":"api"},{"location":"addons/api/#api","text":"The REST API for communication with the core system is build as an addon too. This makes it easy to customize the system by adding additional resources.","title":"API"},{"location":"addons/api/#views","text":"Views can be registered during the setup process 1 2 async def async_setup ( core : ApplicationCore , config : dict ) -> bool : core . http . register_request ( APIStatusView ) These views need to inherit from core.webserver.request.RequestView and provide the properties url and name . With an additional requires_auth property can be defined if the resource can be reached without authentication. Property Required Description url path to the resource name internal name of the resource. requires_auth enables the auth check","title":"Views"},{"location":"addons/api/#methods","text":"Each view can offer multiple methods to the given url property. an async get method will handle GET requests 1 2 async def get ( self , core , request ) -> web . Response : return self . json_message ( \"respond with a json message.\" ) while an async post method will handle POST requests and so on. 1 2 async def post ( self , request , entity_id ) -> web . Response : return self . json_message ( \"entity has been created.\" )","title":"Methods"},{"location":"addons/api/#response","text":"Each view can define its own response. Return a simple json 1 return self . json_message ( \"simple json string\" ) Return a data as json 1 return self . json ({ \"foo\" : \"bar\" })","title":"Response"},{"location":"addons/metadata/","text":"metadata This addon is responsible for generating tags based on media`s metadata e.g.: filename exif","title":"metadata"},{"location":"addons/metadata/#metadata","text":"This addon is responsible for generating tags based on media`s metadata e.g.: filename exif","title":"metadata"},{"location":"addons/nextcloud/","text":"nextcloud Nextcloud is a client-server hosting service for storing and syncing files between devices. Using nextcloud as a booster for syncing files into photos.network till a native sync app is available.","title":"nextcloud"},{"location":"addons/nextcloud/#nextcloud","text":"Nextcloud is a client-server hosting service for storing and syncing files between devices. Using nextcloud as a booster for syncing files into photos.network till a native sync app is available.","title":"nextcloud"},{"location":"addons/places365/","text":"places365 Places365 is a Places CNN for scene recognition, it will use computer vision to predict the scene category, attributes, and class activation map. It is based on a Paper written by Bolei Zhou","title":"places365"},{"location":"addons/places365/#places365","text":"Places365 is a Places CNN for scene recognition, it will use computer vision to predict the scene category, attributes, and class activation map. It is based on a Paper written by Bolei Zhou","title":"places365"},{"location":"addons/sqlite/","text":"sqlite Simple storage addon to write tags and meta data into a sqlite database.","title":"sqlite"},{"location":"addons/sqlite/#sqlite","text":"Simple storage addon to write tags and meta data into a sqlite database.","title":"sqlite"},{"location":"core/","text":"Core The core system is responsible for tasks e.g.: Authentication (validate the identity of users) Authorization (handle access privileges of resources like photos or albums) Add-on handling (managing add-ons) Persistency (read / write data) Task Processing (keep track of running tasks)","title":"Getting started"},{"location":"core/#core","text":"The core system is responsible for tasks e.g.: Authentication (validate the identity of users) Authorization (handle access privileges of resources like photos or albums) Add-on handling (managing add-ons) Persistency (read / write data) Task Processing (keep track of running tasks)","title":"Core"},{"location":"core/authentication/","text":"Authentication The core system is using IndieAuth 1 for authentication. restrict third-party apps to a limited subset of resources revoke access for a particular third party without changing credentials Scopes The list of available scopes may change. Scope Description openid 2 access the users public profile e.g.: username profile 2 access the users personal profile information e.g.: firstname, lastname email 2 access the users associated email address. phone 2 access the users associated phone number. library.read Read only Grant the user to list all photos owned by the user. library.append Limited write access Grant the user to add new photos, create new albums. library.edit Grant the user to edit photos owned by the user. library.write Grant the user to add and edit photos, albums, tags. library.share Grant the user to create new shares (photos/videos/albums). admin.users:read Grant the user to list users on the system. admin.users:invite Grant the user to invite new users to the system. admin.users:write Grant the user to manage users on the system. OAuth specification can be found here: RFC6749 \u21a9 This is a default scope in OAuth 2.0 \u21a9 \u21a9 \u21a9 \u21a9","title":"Authentication"},{"location":"core/authentication/#authentication","text":"The core system is using IndieAuth 1 for authentication. restrict third-party apps to a limited subset of resources revoke access for a particular third party without changing credentials","title":"Authentication"},{"location":"core/authentication/#scopes","text":"The list of available scopes may change. Scope Description openid 2 access the users public profile e.g.: username profile 2 access the users personal profile information e.g.: firstname, lastname email 2 access the users associated email address. phone 2 access the users associated phone number. library.read Read only Grant the user to list all photos owned by the user. library.append Limited write access Grant the user to add new photos, create new albums. library.edit Grant the user to edit photos owned by the user. library.write Grant the user to add and edit photos, albums, tags. library.share Grant the user to create new shares (photos/videos/albums). admin.users:read Grant the user to list users on the system. admin.users:invite Grant the user to invite new users to the system. admin.users:write Grant the user to manage users on the system. OAuth specification can be found here: RFC6749 \u21a9 This is a default scope in OAuth 2.0 \u21a9 \u21a9 \u21a9 \u21a9","title":"Scopes"},{"location":"core/configuration/","text":"Configuration File To run an instance of the core system will require a configuration file. It will define the place to write and read data from or wich addons should be loaded on startup. Some addons still needed to be configured by the users itself. Minimal configuration 1 2 3 4 5 6 { \"internal_url\" : \"192.168.0.1\" , \"external_url\" : \"external.url.com\" , \"data_dir\" : \"data\" , \"addons\" : [] } Configuration with addons 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"internal_url\" : \"192.168.0.1\" , \"external_url\" : \"external.url.com\" , \"data_dir\" : \"data\" , \"addons\" : [ { \"name\" : \"api\" , \"config\" : { \"cors\" : false } }, { \"name\" : \"sqlite\" , \"config\" : { \"database_file\" : \"test.sqlite\" } } ] }","title":"Configuration"},{"location":"core/configuration/#configuration-file","text":"To run an instance of the core system will require a configuration file. It will define the place to write and read data from or wich addons should be loaded on startup. Some addons still needed to be configured by the users itself.","title":"Configuration File"},{"location":"core/configuration/#minimal-configuration","text":"1 2 3 4 5 6 { \"internal_url\" : \"192.168.0.1\" , \"external_url\" : \"external.url.com\" , \"data_dir\" : \"data\" , \"addons\" : [] }","title":"Minimal configuration"},{"location":"core/configuration/#configuration-with-addons","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \"internal_url\" : \"192.168.0.1\" , \"external_url\" : \"external.url.com\" , \"data_dir\" : \"data\" , \"addons\" : [ { \"name\" : \"api\" , \"config\" : { \"cors\" : false } }, { \"name\" : \"sqlite\" , \"config\" : { \"database_file\" : \"test.sqlite\" } } ] }","title":"Configuration with addons"},{"location":"core/env/","text":"Prepare setup Prepare an environment by running: 1 2 3 $ python3 -m venv venv $ source ./venv/bin/activate ( venv ) $ pip3 install -r requirements_test.txt After the environment is build, install the core: 1 ( venv ) $ python3 setup.py install Run The core can be started from the venv: 1 ( venv ) $ python3 ./venv/bin/core","title":"Environment"},{"location":"core/env/#prepare-setup","text":"Prepare an environment by running: 1 2 3 $ python3 -m venv venv $ source ./venv/bin/activate ( venv ) $ pip3 install -r requirements_test.txt After the environment is build, install the core: 1 ( venv ) $ python3 setup.py install","title":"Prepare setup"},{"location":"core/env/#run","text":"The core can be started from the venv: 1 ( venv ) $ python3 ./venv/bin/core","title":"Run"},{"location":"core/structure/","text":"Structure Since the core system is responsible for multiple tasks, it is mandatory to keep the file structure clean and well arranged. The project itself has a default python application file structure. 1 2 3 4 5 core/ \u251c\u2500\u2500 core/ \u251c\u2500\u2500 tests/ \u251c\u2500\u2500 setup.cfg \u2514\u2500\u2500 setup.py inside the core package all necessary files are structured inside subfolders. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 core/ \u2514\u2500\u2500 core/ \u251c\u2500\u2500 __main__.py \u251c\u2500\u2500 addon.py \u251c\u2500\u2500 addons/ \u251c\u2500\u2500 authentication/ \u251c\u2500\u2500 authorization/ \u251c\u2500\u2500 configs.py \u251c\u2500\u2500 const.py \u251c\u2500\u2500 core.py \u251c\u2500\u2500 loader.py \u251c\u2500\u2500 persistency/ \u251c\u2500\u2500 utils/ \u2514\u2500\u2500 webserver/ File Description __main__.py is the entry point and will only read the configuration file and create an application instance. core.py will monitor the application state and manage all base tasks e.g. setup and load addons and starting the webserver . addon.py defines how addons are loaded config.py abstracts the RuntimeConfiguration and Configuration const.py contains development constants e.g.: versions core.py application logic loader.py helper to load addons","title":"Structure"},{"location":"core/structure/#structure","text":"Since the core system is responsible for multiple tasks, it is mandatory to keep the file structure clean and well arranged. The project itself has a default python application file structure. 1 2 3 4 5 core/ \u251c\u2500\u2500 core/ \u251c\u2500\u2500 tests/ \u251c\u2500\u2500 setup.cfg \u2514\u2500\u2500 setup.py inside the core package all necessary files are structured inside subfolders. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 core/ \u2514\u2500\u2500 core/ \u251c\u2500\u2500 __main__.py \u251c\u2500\u2500 addon.py \u251c\u2500\u2500 addons/ \u251c\u2500\u2500 authentication/ \u251c\u2500\u2500 authorization/ \u251c\u2500\u2500 configs.py \u251c\u2500\u2500 const.py \u251c\u2500\u2500 core.py \u251c\u2500\u2500 loader.py \u251c\u2500\u2500 persistency/ \u251c\u2500\u2500 utils/ \u2514\u2500\u2500 webserver/ File Description __main__.py is the entry point and will only read the configuration file and create an application instance. core.py will monitor the application state and manage all base tasks e.g. setup and load addons and starting the webserver . addon.py defines how addons are loaded config.py abstracts the RuntimeConfiguration and Configuration const.py contains development constants e.g.: versions core.py application logic loader.py helper to load addons","title":"Structure"},{"location":"frontend/","text":"Frontend App-like experience for users as Web Application. Users can browse and manage photos, organize them in albums, tag objects, locations or people or add and change sharing options. The frontend will contain different view: Grid (Showcase of all photos / videos ordered by date) Albums (Showcase bundled in albums) Map (Grouped together by their location on a map) Search (Search and filter photos / videos by their content or attributes) Details (See attributes, properties and meta data of a single image) Share (Share images and albums with friends, family or coworkers)","title":"Getting started"},{"location":"frontend/#frontend","text":"App-like experience for users as Web Application. Users can browse and manage photos, organize them in albums, tag objects, locations or people or add and change sharing options. The frontend will contain different view: Grid (Showcase of all photos / videos ordered by date) Albums (Showcase bundled in albums) Map (Grouped together by their location on a map) Search (Search and filter photos / videos by their content or attributes) Details (See attributes, properties and meta data of a single image) Share (Share images and albums with friends, family or coworkers)","title":"Frontend"},{"location":"frontend/albums/","text":"Albums Albums with name and preview image created either by the user or invited create new album invite people into album collaborative editing","title":"Albums"},{"location":"frontend/albums/#albums","text":"Albums with name and preview image created either by the user or invited create new album invite people into album collaborative editing","title":"Albums"},{"location":"frontend/details/","text":"Details See all attributes, properties and information for a selected image. First a user will see only relevant data: tagged faces date/time location image owner (shared by) Second the user can select something like all informations to see more: camera / lens information additional tags exif data (ISO, shutter speed, flash) This will keep the UI clean and simple but also make all data visible.","title":"Details"},{"location":"frontend/details/#details","text":"See all attributes, properties and information for a selected image. First a user will see only relevant data: tagged faces date/time location image owner (shared by) Second the user can select something like all informations to see more: camera / lens information additional tags exif data (ISO, shutter speed, flash) This will keep the UI clean and simple but also make all data visible.","title":"Details"},{"location":"frontend/grid/","text":"Grid Photo grid with a timeline to browse through time while passing in review. screen optimized previews (thumbnails) lazy loading multi selection (download, album creation, sharing)","title":"Grid"},{"location":"frontend/grid/#grid","text":"Photo grid with a timeline to browse through time while passing in review. screen optimized previews (thumbnails) lazy loading multi selection (download, album creation, sharing)","title":"Grid"},{"location":"frontend/map/","text":"Map Offer a heat map where users can filter location based images on a map. showing a heatmap filter by visible view area","title":"Map"},{"location":"frontend/map/#map","text":"Offer a heat map where users can filter location based images on a map. showing a heatmap filter by visible view area","title":"Map"},{"location":"frontend/search/","text":"Search Users can filter their images and videos by tags, attributs or locations.","title":"Search"},{"location":"frontend/search/#search","text":"Users can filter their images and videos by tags, attributs or locations.","title":"Search"},{"location":"frontend/share/","text":"Share Users can share their photos, videos and albums with others by users (account required) link only users can access the link everyone can access the link public (create a portfolio)","title":"Share"},{"location":"frontend/share/#share","text":"Users can share their photos, videos and albums with others by users (account required) link only users can access the link everyone can access the link public (create a portfolio)","title":"Share"},{"location":"mobile/","text":"Mobile Native mobile clients aren't limited in background execution wich is mandatory to sync data with the photos.network instance. The Web Application should of course be mobile friendly, so users aren't forced to use the native app.","title":"General"},{"location":"mobile/#mobile","text":"Native mobile clients aren't limited in background execution wich is mandatory to sync data with the photos.network instance. The Web Application should of course be mobile friendly, so users aren't forced to use the native app.","title":"Mobile"},{"location":"mobile/android/","text":"Android Android specific development details.","title":"Android"},{"location":"mobile/android/#android","text":"Android specific development details.","title":"Android"},{"location":"mobile/ios/","text":"iOS iOS specific development details.","title":"iOS"},{"location":"mobile/ios/#ios","text":"iOS specific development details.","title":"iOS"},{"location":"supervisor/","text":"Supervisor The supervisor will keep the system up-to-date, and provide an API to manage the core system from outside e.g.: changing network settings restart the core application load addons without restarting the system","title":"Supervisor"},{"location":"supervisor/#supervisor","text":"The supervisor will keep the system up-to-date, and provide an API to manage the core system from outside e.g.: changing network settings restart the core application load addons without restarting the system","title":"Supervisor"}]}