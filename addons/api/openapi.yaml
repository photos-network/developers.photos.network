openapi: 3.0.1
info:
  title: Photos.network
  description: "Photos.network core API. <br /><br />
  Default API implementation of your local photos.network instance.<br />
  Implementation details can be found in the `api addon` in the `core/addons/api` folder."
  version: 0.3.29
servers:
- url: http://127.0.0.1:7777
tags:
- name: status
  description: Status of the api
- name: photos
  description: Access to users photos
- name: user
  description: Operations for user management
- name: storage
  description: Operations for folders and files
paths:
  /:
    get:
      tags:
      - status
      summary: Check the status of the API.
      responses:
        200:
          description: Indicates the current status of the api
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: API running.
    head:
      tags:
      - status
      summary: Check the status of the API.
      responses:
        200:
          description: Indicates the current status of the api
  /v1/photos:
    get:
      tags:
      - photos
      summary: List all photos for current user
      description: Returns a list of photos
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Limit after which the results are skipped
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoList'
      security:
      - OAuth2:
        - library:read
  /v1/photo/{photoId}:
    get:
      tags:
      - photos
      summary: Show detailed information for photo ID
      description: Returns a detailed information for a single photo
      parameters:
      - name: photoId
        in: path
        description: ID of photo to return
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoDetails'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Photo not found
          content: {}
      security:
      - OAuth2:
        - library:read
    # post:
    #   tags:
    #   - photos
    #   summary: Updates at least one property of the photo  ID
    #   parameters:
    #   - name: photoId
    #     in: path
    #     description: ID of the photo that needs to be updated
    #     required: true
    #     schema:
    #       type: string
    #       format: uuis
    #   requestBody:
    #     content:
    #       application/x-www-form-urlencoded:
    #         schema:
    #           properties:
    #             name:
    #               type: string
    #               description: Updated name of the pet
    #             status:
    #               type: string
    #               description: Updated status of the pet
    #   responses:
    #     405:
    #       description: Invalid input
    #       content: {}
    #   security:
    #   - OAuth2:
    #     - library:write
    #     - library:read
    # delete:
    #   tags:
    #   - photos
    #   summary: Deletes a pet
    #   operationId: deletePet
    #   parameters:
    #   - name: photoId
    #     in: path
    #     description: Pet id to delete
    #     required: true
    #     schema:
    #       type: integer
    #       format: int64
    #   responses:
    #     400:
    #       description: Invalid ID supplied
    #       content: {}
    #     404:
    #       description: Pet not found
    #       content: {}
    #   security:
    #   - OAuth2:
    #     - library:write
    #     - library:read
  /v1/users:
    get:
      tags:
      - user
      summary: Get a list of registered users
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
      - OAuth2:
        - admin.users:read
  /v1/user/{userId}:
    get:
      tags:
      - user
      summary: Get user by user ID
      parameters:
      - name: userId
        in: path
        description: 'The user ID that needs to be fetched.'
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content: {}
      security:
      - OAuth2:
        - openid
        - profile
        - email
    patch:
      tags:
      - user
      summary: Partial update to the current user
      description: Update properties of the logged in user.
      parameters:
      - name: userId
        in: path
        description: user ID that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: Invalid data
        404:
          description: User not found
      security:
      - OAuth2:
        - openid
        - profile
        - email
    delete:
      tags:
      - user
      summary: Delete user
      description: Logged in user will be deleted permanently after deadline. 
      parameters:
      - name: userId
        in: path
        description: user ID that need to be marked as deleted
        required: true
        schema:
          type: string
      responses:
        202:
          description: User will be deleted soon.
          content:
            application/json:
              schema:
                type: object
                properties:
                  deadline:
                    type: string
                    format: date-time
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - OAuth2:
        - openid
        - profile
        - email
  /v1/user:
    post:
      tags:
      - user
      summary: Create a new User
      requestBody:
        description: Updated user object
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        201:
          description: successful operation
        400:
          description: Invalid user supplied
      security:
      - OAuth2:
        - admin.users:write
  /v1/directories:
    get:
      tags:
        - storage
      summary: get a list of available directories
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Directory'
      security:
      - OAuth2:
        - library:write
  /v1/directories/{directoryId}:
    post:
      tags:
        - storage
      summary: provision a directory to a specific user
      parameters:
      - name: directoryId
        in: path
        description: The directory ID to map to the current user.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
        400:
          description: failed operation
      security:
      - OAuth2:
        - library:write
    delete:
      tags:
        - storage
      summary: abandon this directory from a specific user
      parameters:
      - name: directoryId
        in: path
        description: The directory ID to abandon from the current user.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
      security:
      - OAuth2:
        - library:write
  /v1/directories/{directoryId}/scan:
    get:
      tags:
        - storage
      summary: get the current scan status.
      parameters:
      - name: directoryId
        in: path
        description: The directory ID to check the status for.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
      security:
      - OAuth2:
        - library:write
    post:
      tags:
        - storage
      summary: start a newdirectory scan.
      parameters:
      - name: directoryId
        in: path
        description: The directory ID to scan.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
      security:
      - OAuth2:
        - library:write
  /v1/file/{fileId}:
    get:
      tags:
      - storage
      summary: request a specifig file
      parameters:
      - name: fileId
        in: path
        description: ID of file to load
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            image/jpeg:
              schema:
                type: string
                format: byte
      security:
      - OAuth2:
        - library:read
  /v1/file:
    post:
      tags:
      - storage
      summary: uploads an image
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
      security:
      - OAuth2:
        - library:write
components:
  schemas:
    PhotoList:
      type: object
      properties:
        offset:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
          default: 50
        size:
          type: integer
          format: int32
          default: 10
        results:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
    Photo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          default: filename.ext
        image_url:
          type: string
          format: uri
    PhotoDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          default: filename.ext
        owner:
          type: string
          default: lastname, firstname
        created_at:
          type: string
          format: date-time
        modified_at:
          type: string
          format: date-time
        details:
          $ref: '#/components/schemas/ExifInformation'
        tags:
          type: array
          items:
            type: string
            default: landscape
        location:
          $ref: '#/components/schemas/Location'
        image_url:
          type: string
          format: uri
    Location:
      type: object
      properties:
        latitude:
          type: number
          default: 20.000000
        longitude:
          type: number
          default: 30.000000
        altitude:
          type: number
          default: 0.0
    ExifInformation:
      type: object
      properties:
        camera:
          type: string
        lens:
          type: string
        focal_length:
          type: string
        iso:
          type: string
        shutter_speed:
          type: string
        aperture:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        lastname:
          type: string
        firstname:
          type: string
          format: password
        lastSeen:
          type: string
          format: date-time
    Account:
      type: object
      properties:
        email:
          type: string
          format: uuid
        lastname:
          type: string
        firstname:
          type: string
          format: password
        password:
          type: string
          format: password
    Directory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://127.0.0.1:7777/oauth/authorize
          tokenUrl: https://127.0.0.1:7777/oauth/token
          scopes:
            openid:   access the users public profile e.g. username
            profile:   access the users personal profile information e.g. firstname, lastname
            email:   access the users associated email address.
            phone:   access the users associated phone number.
            library:read:   Read only Grant the user to list all photos owned by the user.
            library:append:   Limited write access Grant the user to add new photos, create new albums.
            library:edit:   Grant the user to edit photos owned by the user.
            library:write:   Grant the user to add and edit photos, albums, tags.
            library:share:   Grant the user to create new shares (photos/videos/albums).
            admin.users:read:   Grant the user to list users on the system.
            admin.users:invite:   Grant the user to invite new users to the system.
            admin.users:write:   Grant the user to manage users on the system.
